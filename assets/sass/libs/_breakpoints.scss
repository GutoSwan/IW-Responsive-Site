/// Breakpoints.
/// @var {list}
$breakpoints: (
  ) !global;

// Mixins.

/// Define breakpoints.
/// @param {map} $x Breakpoints.
@mixin breakpoints($x: ()) {
  $breakpoints: $x !global;
}

/// Envolve @content em um bloco @media visando uma orientação específica.
/// @param {string} $orientation orientação.
@mixin orientation($orientation) {
  @media screen and (orientation: #{$orientation}) {
    @content;
  }
}

/// Envolve @content em um bloco @media usando uma determinada consulta.
/// @param {string} $query consulta.
@mixin breakpoint($query: null) {

  $breakpoint: null;
  $op: null;
  $media: null;

  // Determinar operador, breakpoint.

  // Maior ou igual.
  @if (str-slice($query, 0, 2)=='>=') {

    $op: 'gte';
    $breakpoint: str-slice($query, 3
  );

}

// Menor ou igual.
@elseif (str-slice($query, 0, 2)=='<=') {

  $op: 'lte';
  $breakpoint: str-slice($query, 3);

}

// Maior que.
@elseif (str-slice($query, 0, 1)=='>') {

  $op: 'gt';
  $breakpoint: str-slice($query, 2);

}

// Menor que.
@elseif (str-slice($query, 0, 1)=='<') {

  $op: 'lt';
  $breakpoint: str-slice($query, 2);

}

// Não.
@elseif (str-slice($query, 0, 1)=='!') {

  $op: 'not';
  $breakpoint: str-slice($query, 2);

}

// Igual.
@else {

  $op: 'eq';
  $breakpoint: $query;

}

// Criar media.
@if ($breakpoint and map-has-key($breakpoints, $breakpoint)) {

  $a: map-get($breakpoints, $breakpoint);

  // Faixa.
  @if (type-of($a)=='list') {

    $x: nth($a, 1);
    $y: nth($a, 2);

    // Somente máximo.
    @if ($x ==null) {

      // Maior ou igual (>= 0 / qualquer coisa)
      @if ($op =='gte') {
        $media: 'screen';
      }

      // Menor ou igual (<= y)
      @elseif ($op =='lte') {
        $media: 'screen and (max-width: '+$y +')';
      }

      // Maior que (> y)
      @elseif ($op =='gt') {
        $media: 'screen and (min-width: '+($y + 1)+')';
      }

      // Menor que (< 0 / inválido)
      @elseif ($op =='lt') {
        $media: 'screen and (max-width: -1px)';
      }

      // Não (>y)
      @elseif ($op =='not') {
        $media: 'screen and (min-width: '+($y + 1)+')';
      }

      // Igual (<= y)
      @else {
        $media: 'screen and (max-width: '+$y +')';
      }

    }

    // Apenas o Minimo.
    @else if ($y ==null) {

      // Maior ou igual (>= x)
      @if ($op =='gte') {
        $media: 'screen and (min-width: '+$x +')';
      }

      // Menor ou igual (<= inf / qualquer coisa)
      @elseif ($op =='lte') {
        $media: 'screen';
      }

      // Maior que (> inf/inválido)
      @elseif ($op =='gt') {
        $media: 'screen and (max-width: -1px)';
      }

      // Menor que (< x)
      @elseif ($op =='lt') {
        $media: 'screen and (max-width: '+($x - 1)+')';
      }

      // Não (< x)
      @elseif ($op =='not') {
        $media: 'screen and (max-width: '+($x - 1)+')';
      }

      // Igual (>= x)
      @else {
        $media: 'screen and (min-width: '+$x +')';
      }

    }

    // Min e max.
    @else {

      // Maior ou igual (>= x)
      @if ($op =='gte') {
        $media: 'screen and (min-width: '+$x +')';
      }

      // Menor ou igual (<= y)
      @elseif ($op =='lte') {
        $media: 'screen and (max-width: '+$y +')';
      }

      // Greater than (> y)
      @elseif ($op =='gt') {
        $media: 'screen and (min-width: '+($y + 1)+')';
      }

      // Maior que (> y)
      @elseif ($op =='lt') {
        $media: 'screen and (max-width: '+($x - 1)+')';
      }

      // Não (< x e > y)
      @elseif ($op =='not') {
        $media: 'screen and (max-width: '+($x - 1)+'), screen and (min-width: '+($y + 1)+')';
      }

      // Igual (>= x e <= y)
      @else {
        $media: 'screen and (min-width: '+$x +') and (max-width: '+$y +')';
      }

    }

  }

  // String.
  @else {

    // Falta um tipo de mídia? Prefixo com "tela".
    @if (str-slice($a, 0, 1)=='(') {
      $media: 'screen and '+$a;
    }

    // Caso contrário, use como está.
    @else {
      $media: $a;
    }

  }

}

// Output.
@media #{$media} {
  @content;
}

}